Problem Statment (restate explicit reqs /identify implicit reqs)
In this exercise, your task is to create a new `Enumerator` object. 
When creating a new `Enumerator`, you may define what values are iterated upon. 
create an `Enumerator` that can iterate over an infinite list of factorials. 
Once you make this new `Enumerator`, test it out by printing out the first 7 factorial values, starting with zero factorial.

- More specifically, print the first 7 factorials by using an "External Iterator".
- Once you have done so, see what happens if you print 3 more factorials (the results won't be correct).
- Now, reset your Enumerator (use the `rewind` method).
- Finally, print 7 more factorials.

Tips:
-check out the `Enumberator::new` method; it should prove a good starting point for this exercise.
-see further details about internal vs external iterators at the start of Enumberator documentation
-You only need 3 `Enumerator` methods to complete this exercise.
-An `Enumerator` also implements the `Enumerable` module, as it makes certain parts of this exercise easier to write.

rules:

input:
output:

Examples / Test Case:
see code

Data Structures:
input:
output:

Algorithm:
create Enumerator object and assign to local variable
  use the block parameter as a `yielder` (see documentation Enumerator#new)
  create loop to calculate factorials
  call factorial or call factorial method within block
  use yielder to determine number of iterations
call enumerator object with argument of number of factorial calcs to add to an array

=end

